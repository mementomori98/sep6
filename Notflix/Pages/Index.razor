@page "/"
@using Core.Domain.Movies
@using Core.Domain.Movies.Models
@using Core.Domain.Recommendations
@using Core.Domain.Recommendations.Models
@using Core.Domain.Authentication
@using Core.Data.Models
@using Core.Domain.Authentication.Models
@inject IMovieService MovieService
@inject IRecommendationService RecommendationService
@inject IAuthenticationService AuthenticationService
@inject LocalStorage LocalStorage

@if (_recommendations != null)
{
    <MudGrid Justify="Justify.Center" Class="d-flex flex-xs-column flex-sm-row" Style="margin-top:20px">
        @foreach (MovieDao movieDao in _recommendations)
        {
            <MainIconCard Content="@movieDao" />
        }
    </MudGrid>

    <MudButton OnClick="GetMore" Variant="Variant.Filled" Color="Color.Primary">Load more</MudButton>
}
@code {
    private List<MovieDao> _recommendations;
    private AuthenticationService authService;
    private UserDao _user;
    private int requestNumber = 0;

    protected override async Task OnInitializedAsync()
    {
        UserDao _user = await AuthenticationService.GetCurrentUser(await GetAuthToken());
        _recommendations = await RecommendationService.GetRecommendationsForUser(new RecommendationRequest() { Token = await GetAuthToken(), RequestNumber = ++requestNumber });
    }

    private async Task GetMore()
    {
        UserDao _user = await AuthenticationService.GetCurrentUser(await GetAuthToken());
        _recommendations = _recommendations.Concat(await RecommendationService.GetRecommendationsForUser(new RecommendationRequest() { Token = await GetAuthToken(), RequestNumber = ++requestNumber })).ToList();
    }

    protected async Task<AuthToken> GetAuthToken() =>
    await LocalStorage.Get<AuthToken>("authToken");
}
