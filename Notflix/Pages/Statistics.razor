@page "/Statistics"
@using System.Text.Json.Serialization
@using System.Text.Json
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Axes.Ticks
@using ChartJs.Blazor.Common.Time
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.Util
@using System.Globalization
@using ChartJs.Blazor.Common.Enums

@code {
    // TODO: This is a bit of a mess. A lot of the methods should be extracted 
    // to a service to keep the focus on presentation logic.

    private LineConfig _config;
    static readonly HttpClient Client = new();
    private Chart _chart;
    private bool _loadingRatings = false;
    private bool _loadingSearch = false;

    private bool IsLoading => _loadingRatings || _loadingSearch;

    private class MovieRating
    {
        public string Title { get; set; }
        public string Released { get; set; }

        [JsonPropertyName("imdb_rating")]
        public string Rating { get; set; }

        public double ParsedRating => ParseRating(Rating);
        public DateTime ParsedReleaseDate => DateTime.ParseExact(Released, "yyyy-MM-dd", CultureInfo.InvariantCulture);
        public string DatedTitle => $"{Title} ({Released})";

        private static double ParseRating(string rating)
        {
            if (double.TryParse(rating, out var res))
                return res;
            return -1;
        }
    }

    private class ActorResult
    {
        public string Name { get; set; }

        [JsonPropertyName("imdb_id")]
        public string ImdbId { get; set; }
    }

    private async Task<IEnumerable<MovieRating>> GetActorMovieRatings(string actorId)
    {
        _loadingRatings = true;
        StateHasChanged();
        var url = $"https://sep6movies-statiscics.herokuapp.com/actor/{actorId}/movieratings";
        var result = await Client.GetAsync(url);
        var resp = JsonSerializer.Deserialize<List<MovieRating>>(
            await result.Content.ReadAsStringAsync(),
            new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
        var orderedResp =
            resp?
                .Where(x => (int) x.ParsedRating != -1)
                .OrderBy(x => x.Released).ToList();
        _loadingRatings = false;
        StateHasChanged();
        return orderedResp;
    }

    private async Task<IEnumerable<ActorResult>> SearchActors(string query)
    {
        if (string.IsNullOrEmpty(query)) return Enumerable.Empty<ActorResult>();
        _loadingSearch = true;
        StateHasChanged();
        var url = $"https://sep6movies-statiscics.herokuapp.com/search/people?query={query}";
        var result = await Client.GetAsync(url);
        var resp = JsonSerializer.Deserialize<List<ActorResult>>(
            await result.Content.ReadAsStringAsync(),
            new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
        _loadingSearch = false;
        StateHasChanged();
        return resp;
    }

    private static LineConfig GetLineConfig()
    {
        return new()
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Movie ratings for actor credits"
                },
                Scales = new Scales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Date"
                            },
                            Time = new TimeOptions
                            {
                                TooltipFormat = "yyyy-MM-DD"
                            },
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel("Rating"),
                            Ticks = new LinearCartesianTicks
                            {
                                Min = 0,
                                Max = 10,
                                StepSize = 1
                            }
                        }
                    }
                }
            }
        };
    }

    private async Task<IDataset<TimePoint>> GetActorDataset(ActorResult actor)
    {
        var color = ColorUtil.RandomColorString();

        var orderedResp = await GetActorMovieRatings(actor.ImdbId);

        IDataset<TimePoint> dataset = new LineDataset<TimePoint>()
        {
            Label = $"{actor.Name} movie ratings",
            BackgroundColor = color,
            BorderColor = color,
            LineTension = 0,
            Fill = FillingMode.Disabled
        };
        foreach (var movieRating in orderedResp)
        {
            dataset.Add(new TimePoint(movieRating.ParsedReleaseDate, movieRating.ParsedRating));
        }
        return dataset;
    }

    private async void AddDataSet(ActorResult actor)
    {
        _config.Data.Datasets.Add(await GetActorDataset(actor));
        await _chart.Update();
    }

    protected override async Task OnInitializedAsync()
    {
        _config = GetLineConfig();
    }

}

@if (IsLoading)
{
    <MudOverlay Visible="true" DarkBackground="true">
        <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
    </MudOverlay>
}


<MudText Typo="Typo.h2">Actor statistics</MudText>
<MudText Typo="Typo.body1">Ever wondered how well the movies an actor has participated in was rated ovearll? Try to search up an actor and find out. Add as many actors as you like and compare :)</MudText>

<SearchField
    TItem="ActorResult"
    OnItemClicked="@(result => AddDataSet(result))"
    Search="@(s => SearchActors(s))"
    Immediate="false"
    PlaceHolder="Actor name">
    <ResultItem>
        <p>@context.Name</p>
    </ResultItem>
</SearchField>
<Chart Config="_config" @ref="_chart"></Chart>