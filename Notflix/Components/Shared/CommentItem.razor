@using Notflix.Components.Movie
@using Core.Domain.Authentication
@using Core.Data.Models
@using Core.Domain.DiscussionItems
@using Notflix.Components.Accounts
@using Core.Domain.DiscussionItems.Models
@using Microsoft.AspNetCore.Components
@inherits AuthBase
@inject IDialogService DialogService
@inject IAuthenticationService AuthenticationService
@inject IDiscussionItemService DiscussionItemService

@code {

    [Inject]
    NavigationManager NavigationManager { get; set; }

    [Parameter]
    public CommentTreeViewModel Content { get; set; }

    private string NewComment { get; set; }

    private string _replyOpen = "";
    private bool _commentOpen = false;
    private UserDao _user;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _user = await AuthenticationService.GetCurrentUser(await GetAuthToken());
    }


    private async void OnVoteUp(MouseEventArgs mouseEvent)
    {
        if (_user == null)
        {
            OpenLoginDialog();
            return;
        }
        if (Content.Interaction == Interactions.Like) return;
        await DiscussionItemService.Interact(new InteractRequest
        {
            DiscussionItemId = Content.Id,
            Token = await GetAuthToken(),
            Interaction = Interactions.Like
        });
        if (Content.Interaction == Interactions.Dislike)
        {
            Content.Interaction = Interactions.Like;
            Content.Dislikes--;
            Content.Likes++;
        }else
        {
            Content.Interaction = Interactions.Like;
            Content.Likes++;
        }
        
        StateHasChanged();
    }

    private async void OnVoteDown(MouseEventArgs mouseEvent)
    {
        if (_user == null)
        {
            OpenLoginDialog();
            return;
        }
        if (Content.Interaction == Interactions.Dislike) return;
        await DiscussionItemService.Interact(new InteractRequest
        {
            DiscussionItemId = Content.Id,
            Token = await GetAuthToken(),
            Interaction = Interactions.Dislike
        });
        if (Content.Interaction == Interactions.Like)
        {
            Content.Interaction = Interactions.Dislike;
            Content.Likes--;
            Content.Dislikes++;
        }else
        {
            Content.Interaction = Interactions.Dislike;
            Content.Dislikes++;
        }
        
        StateHasChanged();
    }

    private async Task OnComment(MouseEventArgs mouseEvent)
    {
        while (Content.HasMore)
        {
            _commentOpen = true;
            await OnGetComments(100);
        }
        if (_user == null)
        {
            OpenLoginDialog();
            return;
        }
        HandleCommentWindow();
    }

    private void HandleCommentWindow()
    {
        if (_replyOpen.Equals(""))
        {
            _replyOpen = "discussion__main";
        }
        else
        {
            NewComment = "";
            _replyOpen = "";
        }
    }

    private void OpenLoginDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("SuccessCallback", new Action(() => NavigationManager.NavigateTo(NavigationManager.Uri, true)));
        DialogService.Show<LoginDialog>("Sign in", parameters);
    }

    private async Task Reply()
    {
        if (NewComment is null or "") return;
        
        var comment = await DiscussionItemService.AddComment(new AddCommentRequest
        {
            DiscussionItemId = Content.Id,
            Text = NewComment,
            Token = await GetAuthToken(),
        });
        Content.Comments = Content.Comments.Append(CommentTreeViewModel.Map(comment));
        _commentOpen = true;
        HandleCommentWindow();
    }

    private async Task OnGetComments(int limit = 10)
    {
        var comments = await DiscussionItemService.GetComments(new GetCommentsRequest
        {
            DiscussionItemId = Content.Id,
            FromDate = Content.Comments.LastOrDefault()?.Created,
            Token = await GetAuthToken(),
            Limit = limit
        });
        Content.Comments ??= new List<CommentTreeViewModel>();
        Content.Comments = Content.Comments.Concat(comments.Items.Select(CommentTreeViewModel.Map));
        Content.HasMore = comments.HasMore;
        _commentOpen = true;
    }

    private async Task OnCloseComments()
    {
        Content.Comments = new List<CommentTreeViewModel>();
        Content.HasMore = true;
        _commentOpen = false;
    }

}

<div class="comment-item">
    <div class="discussion d-flex">
        <img src="/Images/avatar.png" class="discussion__avatar" alt="user avatar"/>
        <div class="@_replyOpen" style="padding-left: 10px; width: 100%">
            <MudText Typo="Typo.body1">@Content.AuthorUsername</MudText>
            <MudText Typo="Typo.body2">@Content.Text</MudText>
            <div class="d-flex" style="font-size: 18px;">
                <div @onmouseup="@OnVoteUp" class="discussion__icon" id="discussion__voteUp">
                    <p style="@(Content.Interaction == Interactions.Like ? "color: #008d41" : "")">&#129145;</p>
                </div>
                <p class="discussion__iconText" style="margin-left: 3px; margin-right: 5px;">@Content.Likes</p>
                <div @onmouseup="@OnVoteDown" class="discussion__icon" id="discussion__voteDown">
                    <p style="@(Content.Interaction == Interactions.Dislike ? "color: #dc0000" : "")">&#129147;</p>
                </div>
                <p class="discussion__iconText" style="margin-left: 3px; margin-right: 5px">@Content.Dislikes</p>
                <div @onmouseup="@OnComment" class="discussion__icon" id="discussion__commentAct" style="margin-left: 5px">
                    <p>&#128490; </p>
                    <p class="discussion__iconText" style="padding-left: 3px">Reply</p>
                </div>
            </div>
            @if (Content.HasMore || Content.Comments.Count() != 0)
            {
                @if (!_commentOpen)
                {
                    <p class="moreDiscussion" style="font-size: 12px; color: #4234aa" @onmouseup="() => OnGetComments()">View comments</p>
                }
                else
                {
                    <p class="moreDiscussion" style="font-size: 12px; color: #4234aa" @onmouseup="() => OnCloseComments()">Hide comments</p>
                }
            }
        </div>
    </div>

    @if (Content.Comments != null && Content.Comments.Any())
    {
        <div class="comment-item-children">
            @foreach (var child in Content.Comments)
            {
                <CommentItem Content="@child"/>
            }
            @if (Content.HasMore)
            {
                <p class="moreDiscussion moreDiscussion__edge" @onmouseup="() => OnGetComments()">View more comments</p>
            }
        </div>
    }
    @if (_replyOpen.Equals("discussion__main"))
    {
        <div class="discussion__commentSection discussion__commentEdge d-flex" style="margin-left: 16px">
            <MudTextField Class="discussion__comment" @bind-Value="NewComment" Label="@_user.Username" Placeholder="Comment..."/>
            <MudButton Style="height: fit-content; margin-top: auto; border:1px solid #594ae2" OnClick="Reply">Reply</MudButton>
        </div>
    }
</div>