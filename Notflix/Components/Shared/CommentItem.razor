@using Notflix.Components.Movie
@using Core.Domain.Authentication
@using Core.Data.Models
@using Core.Domain.DiscussionItems
@using Notflix.Components.Accounts
@using Core.Domain.DiscussionItems.Models
@using Microsoft.AspNetCore.Components
@inherits AuthBase
@inject IDialogService DialogService
@inject IAuthenticationService AuthenticationService
@inject IDiscussionItemService DiscussionItemService

@code {

    [Inject]
    NavigationManager NavigationManager { get; set; }
    
    [Parameter]
    public Comment Content { get; set; }
    
    private string NewComment { get; set; }
    
    private string _commentOpen = "";
    private int _page = 0;
    private UserDao _user;
    PageResult<Comment> _subcomments = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _user = await AuthenticationService.GetCurrentUser(await GetAuthToken());
    }


    private void OnVoteUp(MouseEventArgs mouseEvent)
    {
        if (_user == null)
        {
            OpenLoginDialog();
            return;
        }
        Console.WriteLine("VoteUp"); //............
    }
    
    private void OnVoteDown(MouseEventArgs mouseEvent)
    {
        if (_user == null)
        {
            OpenLoginDialog();
            return;
        }
        Console.WriteLine("VoteDown"); //............
    }
    
    private void OnComment(MouseEventArgs mouseEvent)
    {
        if (_user == null)
        {
            OpenLoginDialog();
            return;
        }
        _commentOpen = _commentOpen.Equals("") ? "discussion__main" : "";
    }

    private void OpenLoginDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("SuccessCallback", new Action(() => NavigationManager.NavigateTo(NavigationManager.Uri, true)));
        DialogService.Show<LoginDialog>("Sign in", parameters);
    }
    
    private async Task Reply()
    { 
        //Execute reply procedure
        Comment reply = new Comment() {AuthorUsername = _user.Username,AuthorId = _user.Id, Text = NewComment, DiscussionItemId = Content.Id};
        reply.Id = await DiscussionItemService.AddSubcomment(reply);
        if (_subcomments.Items == null) _subcomments.Items = new List<Comment>();
        _subcomments.Items = _subcomments.Items.Prepend(reply);
        _subcomments.HasMore = _subcomments.HasMore;
        _commentOpen = "";
    }
    
    private async Task OnGetComments()
    {
        _page++;
        PageResult<Comment> newList = await DiscussionItemService.GetSubcommentsOnDiscussionItem(Content.Id, _page, 1);
        if (_subcomments.Items != null)
        {
            _subcomments.Items = _subcomments.Items.Concat(newList.Items);
            _subcomments.HasMore = newList.HasMore;
        }
        else
        {
            _subcomments = newList;
        }
    }
}

<div class="comment-item">
    <div class="discussion d-flex">
        <img src="/Images/avatar.png" class="discussion__avatar" alt="user avatar"/>
        <div class="@_commentOpen" style="padding-left: 10px; width: 100%">
            <MudText Typo="Typo.body1">@Content.AuthorUsername</MudText>
            <MudText Typo="Typo.body2">@Content.Text</MudText>
            <div class="d-flex" style="font-size: 18px;">
                <div @onmouseup="@OnVoteUp"  class="discussion__icon" id="discussion__voteUp">
                    <p>&#129145;</p>
                </div>
                <p class="discussion__iconText" style="margin-left: 3px; margin-right: 5px;">@Content.NumberOfLikes</p>
                <div @onmouseup="@OnVoteDown"  class="discussion__icon" id="discussion__voteDown">
                    <p>&#129147;</p>
                </div>
                <p class="discussion__iconText" style="margin-left: 3px; margin-right: 5px">@Content.NumberOfDislikes</p>
                <div @onmouseup="@OnComment" class="discussion__icon" id="discussion__commentAct" style="margin-left: 5px">
                    <p>&#128490; </p>
                    <p class="discussion__iconText" style="padding-left: 3px">Reply</p>
                </div>
                <div @onmouseup="@OnGetComments" class="discussion__icon" id="discussion__commentAct" style="margin-left: 5px">
                    <p class="discussion__iconText" style="padding-left: 3px">Get comments</p>
                </div>
            </div>
            @if (_commentOpen.Equals("discussion__main"))
            {
                <div class="discussion__commentSection d-flex">
                    <MudTextField Class="discussion__comment" @bind-Value="NewComment" Label="@_user.Username" Placeholder="Comment..."/>
                    <MudButton Style="height: fit-content; margin-top: auto; border:1px solid #594ae2" OnClick="Reply">Reply</MudButton>
                </div>
            }
        </div>
    </div>

    @if (_subcomments.Items != null && _subcomments.Items.Any())
    {
        <div class="comment-item-children">
            @foreach (var child in _subcomments.Items)
            {
                <CommentItem Content="@child"></CommentItem>
            }
            @if (_subcomments.HasMore)
            {
               <p class="moreComments" @onmouseup="OnGetComments">View more comments</p>
                <MudButton OnClick="OnGetComments">Pikachu</MudButton>
            }
            
        </div>
    }
    


</div>