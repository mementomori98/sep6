@using Core.Domain.DiscussionItems
@using Core.Domain.DiscussionItems.Models
@using Core.Domain.Authentication
@using Core.Data.Models
@inject IDiscussionItemService DiscussionItemService
@inject IAuthenticationService AuthenticationService
@inherits AuthBase

@code {

    [Parameter]
    public long MovieId { get; set; }


    private UserDao _user;
    private string NewFunFact { get; set; }
    private IEnumerable<CommentTreeViewModel> _funFacts;
    private bool HasMoreFunFacts { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _user = await AuthenticationService.GetCurrentUser(await GetAuthToken());
        var funFacts = await DiscussionItemService.GetFunFacts(new GetFunFactsRequest
        {
            DiscussableId = MovieId,
            ToDate = DateTime.Now,
            Token = await GetAuthToken(),
        });
        HasMoreFunFacts = funFacts.HasMore;
        _funFacts = funFacts.Items.Select(CommentTreeViewModel.Map).OrderByDescending(c => c.Created).ToList();
    }

    private async Task MakeFunFact()
    {
        if (NewFunFact is null or "") return;
        var funFacts = await DiscussionItemService.AddFunFact(new AddFunFactRequest
        {
            DiscussableId = MovieId,
            Text = NewFunFact,
            Token = await GetAuthToken(),
        });
        _funFacts = _funFacts.Prepend(CommentTreeViewModel.Map(funFacts)).OrderByDescending(c => c.Created).ToList();
    }
    
    private async Task OnGetFunFacts(int limit = 10)
    {
        var funFacts = await DiscussionItemService.GetFunFacts(new GetFunFactsRequest
        {
            DiscussableId = MovieId,
            ToDate = _funFacts.LastOrDefault()?.Created,
            Token = await GetAuthToken()
        });
        HasMoreFunFacts = funFacts.HasMore;
        _funFacts = _funFacts.Concat(funFacts.Items.Select(CommentTreeViewModel.Map)).OrderByDescending(c => c.Created).ToList();
    }
}
@if (_user != null)
{
    <div class="discussion__makeNew d-flex" style="margin-bottom: 10px">
         <MudTextField  @bind-Value="NewFunFact" Label="@_user.Username" Placeholder="Post a new fun fact..."/>
         <MudButton Style="height: fit-content; margin-top: auto; border:1px solid #594ae2" OnClick="MakeFunFact">Post</MudButton>
    </div>
}

@foreach (var funFact in _funFacts ?? new CommentTreeViewModel[0])
{
    <CommentItem Content="@funFact"/>
}
@if (HasMoreFunFacts)
{
    <p class="moreDiscussion" @onmouseup="() => OnGetFunFacts()">Load more fun facts</p>
}