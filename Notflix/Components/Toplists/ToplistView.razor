@using Core.Domain.Movies.Models
@using Core.Domain.Toplists.Models
@using Core.Domain.Authentication
@using Core.Domain.Toplists
@inherits AuthBase
@inject IAuthenticationService AuthenticationService
@inject IToplistService ToplistService
@inject ISnackbar Snackbar


@code {

    [Parameter]
    public long ToplistId { get; set; }

    private ToplistModel Toplist { get; set; }

    private bool Editable { get; set; }

    private string SearchText { get; set; }

    private IEnumerable<MovieSearchItem> Results { get; set; }

    private bool Renaming { get; set; }

    private string Name { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await Fetch();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Editable)
            return;

        var user = await AuthenticationService.GetCurrentUser(await GetAuthToken());
        Editable = user.Id == Toplist.UserId;
        if (Editable)
            StateHasChanged();
    }

    private async Task Fetch()
    {
        Toplist = await ToplistService.GetToplist(new GetToplistRequest {ToplistId = ToplistId});
        Name = Toplist.Name;
    }

    private async Task OnChangePosition(long id, int position)
    {
        Toplist = await ToplistService.ChangePosition(new ChangePositionRequest
        {
            Token = await GetAuthToken(),
            MovieId = id,
            Position = position,
            ToplistId = ToplistId
        });
        StateHasChanged();
    }

    private async Task Remove(long id)
    {
        Toplist = await ToplistService.RemoveMovie(new RemoveMovieRequest
        {
            ToplistId = ToplistId,
            MovieId = id,
            Token = await GetAuthToken()
        });
        StateHasChanged();
    }

    private async Task OnClicked(string imdbId)
    {
        if (Toplist.Items.Any(m => m.ImdbId == imdbId))
        {
            Snackbar.Add("This movie is already on the toplist", Severity.Error);
            return;
        }
        Toplist = await ToplistService.AddMovie(new AddMovieRequest
        {
            Position = Toplist.Items.Count(),
            Token = await GetAuthToken(),
            ToplistId = ToplistId,
            MovieImdbId = imdbId
        });
        StateHasChanged();
    }

    private void RenameClick()
    {
        if (Editable)
            Renaming = true;
        StateHasChanged();
    }

    private async Task OnRename()
    {
        Toplist = await ToplistService.Rename(new RenameToplistRequest
        {
            Token = await GetAuthToken(),
            ToplistId = ToplistId,
            Name = Name
        });
        Renaming = false;
        StateHasChanged();
    }

    private async Task OnCancelRename()
    {
        Renaming = false;
        Name = Toplist.Name;
        StateHasChanged();
    }

}

<Card Style="">
    <MudGrid>

        @if (!Renaming)
        {
            <MudItem xs="12" Class="d-flex">
                <MudText Typo="Typo.h5">@Toplist.Name</MudText>
                <MudIconButton Icon="@(Icons.Filled.Edit)" Class="ml-4 mt-n2" OnClick="RenameClick"/>
            </MudItem>
        }
        else
        {
            <MudItem xs="8">
                <MudTextField @bind-Value="@Name" OnKeyPress="@Events.OnEnter(async () => await OnRename())" AutoFocus="true" Variant="Variant.Outlined" Immediate="true"/>
            </MudItem>
            <MudItem xs="4">
                <MudButton OnClick="OnRename" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">Rename</MudButton>
                <MudButton OnClick="OnCancelRename" Variant="Variant.Filled" Color="Color.Secondary" Class="mt-4 ml-2">Cancel</MudButton>
            </MudItem>
        }

        @if (Editable)
        {
            <MudItem xs="12">
                <MovieSearch OnItemClicked="@(async s => await OnClicked(s))"/>
            </MudItem>
        }
        @foreach (var item in Toplist.Items.OrderBy(i => i.Position))
        {
            <MudItem xs="12">
                <MudDivider Class="mb-4 mt-n3"/>
                <MudGrid>
                    <MudItem xs="2">
                        <Avatar Href="@item.ImageUrl"/>
                    </MudItem>
                    <MudItem xs="9" Class="d-flex flex-column justify-space-around">
                        <div>
                            <MudText Typo="Typo.h5">@item.Title</MudText>
                            <MudText Typo="Typo.body1">@item.Year</MudText>
                        </div>
                    </MudItem>
                    @if (Editable)
                    {
                        <MudItem xs="1">
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudIconButton Icon="@(Icons.Filled.KeyboardArrowUp)" Disabled="@(item.Position == 0)" OnClick="() => OnChangePosition(item.MovieId, item.Position - 1)"/>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudIconButton Icon="@(Icons.Filled.KeyboardArrowDown)" Disabled="@(item.Position == Toplist.Items.Count() - 1)" OnClick="() => OnChangePosition(item.MovieId, item.Position + 1)"/>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudIconButton Icon="@(Icons.Filled.Close)" OnClick="() => Remove(item.MovieId)"/>
                                </MudItem>
                            </MudGrid>

                        </MudItem>
                    }
                </MudGrid>
            </MudItem>
        }
    </MudGrid>
</Card>