// <auto-generated />
using System;
using Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Core.Migrations
{
    [DbContext(typeof(MovieContext))]
    [Migration("20210524100542_ToplistPublic")]
    partial class ToplistPublic
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Core.Data.Models.DiscussableDao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Dummy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Discussable");
                });

            modelBuilder.Entity("Core.Data.Models.DiscussionItemDao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("DiscussableId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DiscussableId");

                    b.ToTable("DiscussionItem");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DiscussionItemDao");
                });

            modelBuilder.Entity("Core.Data.Models.DiscussionItems.UserDiscussionItemInteraction", b =>
                {
                    b.Property<long>("DiscussionItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("InteractionType")
                        .HasColumnType("int");

                    b.HasKey("DiscussionItemId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDiscussionItemInteraction");
                });

            modelBuilder.Entity("Core.Data.Models.LoginSessionDao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Token")
                        .HasColumnType("varchar(767)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("LoginSession");
                });

            modelBuilder.Entity("Core.Data.Models.ToplistMovieDao", b =>
                {
                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<long>("ToplistId")
                        .HasColumnType("bigint");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "ToplistId");

                    b.HasIndex("ToplistId", "Position")
                        .IsUnique();

                    b.ToTable("ToplistMovie");
                });

            modelBuilder.Entity("Core.Data.Models.UserDao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("Core.Data.Models.ActorDao", b =>
                {
                    b.HasBaseType("Core.Data.Models.DiscussableDao");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.ToTable("Actor");
                });

            modelBuilder.Entity("Core.Data.Models.MovieDao", b =>
                {
                    b.HasBaseType("Core.Data.Models.DiscussableDao");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("ImdbId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Year")
                        .HasColumnType("text");

                    b.HasIndex("ImdbId")
                        .IsUnique();

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("Core.Data.Models.ToplistDao", b =>
                {
                    b.HasBaseType("Core.Data.Models.DiscussableDao");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Public")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.ToTable("Toplist");
                });

            modelBuilder.Entity("Core.Data.Models.CommentDao", b =>
                {
                    b.HasBaseType("Core.Data.Models.DiscussionItemDao");

                    b.Property<long?>("DiscussionItemId")
                        .HasColumnType("bigint");

                    b.HasIndex("DiscussionItemId");

                    b.HasDiscriminator().HasValue("CommentDao");
                });

            modelBuilder.Entity("Core.Data.Models.FunFactDao", b =>
                {
                    b.HasBaseType("Core.Data.Models.DiscussionItemDao");

                    b.HasDiscriminator().HasValue("FunFactDao");
                });

            modelBuilder.Entity("Core.Data.Models.ReviewDao", b =>
                {
                    b.HasBaseType("Core.Data.Models.DiscussionItemDao");

                    b.Property<int>("NumberOfStars")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ReviewDao");
                });

            modelBuilder.Entity("Core.Data.Models.DiscussionItemDao", b =>
                {
                    b.HasOne("Core.Data.Models.UserDao", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Data.Models.DiscussableDao", null)
                        .WithMany()
                        .HasForeignKey("DiscussableId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Core.Data.Models.DiscussionItems.UserDiscussionItemInteraction", b =>
                {
                    b.HasOne("Core.Data.Models.DiscussionItemDao", null)
                        .WithMany()
                        .HasForeignKey("DiscussionItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Data.Models.UserDao", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Data.Models.LoginSessionDao", b =>
                {
                    b.HasOne("Core.Data.Models.UserDao", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Data.Models.ToplistMovieDao", b =>
                {
                    b.HasOne("Core.Data.Models.MovieDao", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Data.Models.ToplistDao", null)
                        .WithMany("ToplistMovies")
                        .HasForeignKey("ToplistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Core.Data.Models.ActorDao", b =>
                {
                    b.HasOne("Core.Data.Models.DiscussableDao", null)
                        .WithOne()
                        .HasForeignKey("Core.Data.Models.ActorDao", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Data.Models.MovieDao", b =>
                {
                    b.HasOne("Core.Data.Models.DiscussableDao", null)
                        .WithOne()
                        .HasForeignKey("Core.Data.Models.MovieDao", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Data.Models.ToplistDao", b =>
                {
                    b.HasOne("Core.Data.Models.DiscussableDao", null)
                        .WithOne()
                        .HasForeignKey("Core.Data.Models.ToplistDao", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Data.Models.CommentDao", b =>
                {
                    b.HasOne("Core.Data.Models.DiscussionItemDao", null)
                        .WithMany()
                        .HasForeignKey("DiscussionItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Data.Models.ToplistDao", b =>
                {
                    b.Navigation("ToplistMovies");
                });
#pragma warning restore 612, 618
        }
    }
}
